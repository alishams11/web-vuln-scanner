# ------------------------
# Stage 1: build Go core
# ------------------------
FROM golang:1.20 AS builder
WORKDIR /usr/src/wvs-core

# Cache modules (copy go.mod/go.sum if present)
COPY core-go/go.* . 2>/dev/null || true
COPY core-go/go.mod core-go/go.sum . 2>/dev/null || true
RUN if [ -f go.mod ]; then go mod download; fi

# Copy the rest of core-go and build
COPY core-go/ ./
# Build statically (optional) - produce binary /usr/local/bin/wvs-core
RUN CGO_ENABLED=0 go build -o /usr/local/bin/wvs-core ./... || \
    (go build -o /usr/local/bin/wvs-core ./... )

# ------------------------
# Stage 2: runtime image
# ------------------------
FROM python:3.11-slim
ENV PYTHONUNBUFFERED=1
WORKDIR /opt/wvs

# Create non-root user
RUN groupadd -r wvs && useradd -r -g wvs -m -d /home/wvs wvs

# Install system deps required for Python packages (if any)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy Python packaging info and requirements (if exists)
COPY pyproject.toml requirements.txt ./
# Install Python deps (if file present)
RUN if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi
# If you prefer poetry or pyproject-based installs, change above accordingly.

# Copy Python package + templates + other code
COPY pywvs/ ./pywvs/
COPY templates/ ./templates/
COPY main.py ./main.py
COPY outputs/ ./outputs/

# Copy Go binary from builder
COPY --from=builder /usr/local/bin/wvs-core /usr/local/bin/wvs-core

# Ensure scripts are executable
RUN chmod +x /usr/local/bin/wvs-core || true

# Switch to non-root user
USER wvs
WORKDIR /home/wvs

# Expose nothing by default (CLI)
# Define default entrypoint: call Python package entrypoint
ENTRYPOINT ["python", "-m", "pywvs"]
CMD ["--help"]

